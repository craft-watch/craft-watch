version: 2.1

workflows:
  version: 2.1
  build_and_deploy:
    jobs:
      - test_backend:
          filters:
            branches:
              ignore: master

      - run_backend:
          filters:
            branches:
              ignore: master

      - build_frontend

      - deploy:
          requires:
            - build_frontend
          filters:
            branches:
              only: master

  daily_scrape:
    triggers:
      - schedule:
          cron: "45 08 * * *"
          filters:
            branches:
              only: master

    jobs:
      - run_backend


commands:
  before_backend_job:
    steps:
      - run:
          name: Create service key
          command: |
            KEY_FILE="${HOME}/service-key.json"
            echo "${GCLOUD_SERVICE_KEY}" > "${KEY_FILE}"
            echo "export GOOGLE_APPLICATION_CREDENTIALS=${KEY_FILE}" >> "${BASH_ENV}"
      - restore_cache:
          # This rarely changes, and is safe to share between branches
          name: Restore cache (Gradle wrapper)
          key: v1-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - restore_cache:
          # This changes relatively frequently, and it's safe to fall back to latest from this branch, or from master
          name: Restore cache (Gradle cache)
          keys:
            - v4-gradle-{{ .Branch }}-{{ checksum "build.gradle.kts" }}
            - v4-gradle-{{ .Branch }}-
            - v4-gradle-
      - restore_cache:
          # This is basically append-only, so safe to share between branches
          name: Restore cache (Application local storage)
          key: v1-local-storage

  after_backend_job:
    steps:
      - save_cache:
          name: Save cache (Gradle wrapper)
          paths:
            - ~/.gradle/wrapper
          key: v1-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - save_cache:
          name: Save cache (Gradle cache)
          paths:
            - ~/.gradle/caches
          key: v4-gradle-{{ .Branch }}-{{ checksum "build.gradle.kts" }}
      - save_cache:
          name: Save cache (Application local storage)
          paths:
            - storage/
          key: v1-local-storage


jobs:
  test_backend:
    docker:
      - image: circleci/openjdk
    steps:
      - checkout
      - before_backend_job
      - run:
          name: Run tests
          command: ./gradlew check
      - after_backend_job
      - store_test_results:
          path: build/test-results/test
      - store_artifacts:
          path: build/test-results/test
          when: always

  run_backend:
    docker:
      - image: circleci/openjdk
    steps:
      - checkout
      - before_backend_job
      - run:
          name: Run scraper application
          command: ./gradlew run
      - after_backend_job

  build_frontend:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - restore_cache:
          name: Restore cache (Yarn cache)
          keys:
            - v2-yarn-{{ .Branch }}-{{ checksum "frontend/yarn.lock" }}
            - v2-yarn-{{ .Branch }}-
            - v2-yarn-
      - run:
          name: Install dependencies
          command: cd frontend && yarn install
      - run:
          name: Lint
          command: cd frontend && yarn lint
      - run:
          name: Build
          command: cd frontend && yarn build
      - save_cache:
          name: Save cache (Frontend build)
          paths:
            - frontend/out
          key: v1-build-{{ .Environment.CIRCLE_SHA1 }}
      - save_cache:
          name: Save cache (Yarn cache)
          paths:
            - ~/.cache/yarn
          key: v2-yarn-{{ .Branch }}-{{ checksum "frontend/yarn.lock" }}

  deploy:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - restore_cache:
          name: Restore cache (Frontend build)
          key: v1-build-{{ .Environment.CIRCLE_SHA1 }}
      - add_ssh_keys:
          fingerprints:
            - b2:01:83:8d:4e:e6:72:11:5f:57:70:11:ec:57:29:42
      - run:
          name: Deploy
          command: ./scripts/deploy.sh
